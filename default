######################################################################
server default {

listen {
	type = auth
	# ipv4addr = *
	# ipv6addr = *
	ipaddr = *
	port = 0
	#interface = eth0
	# clients = per_socket_clients
	# recv_buff = 65536
	limit {
	      max_connections = 16
	      lifetime = 0
	      idle_timeout = 30
	}
}


listen {
	ipaddr = *
	# ipv6addr = ::
	port = 0
	type = acct
	# interface = eth0
	# clients = per_socket_clients

	limit {
		# max_pps = 0
		# idle_timeout = 0
		# lifetime = 0
		# max_connections = 0
	}
}

# IPv6 versions of the above - read their full config to understand options
listen {
	type = auth
	ipv6addr = ::	# any.  ::1 == localhost
	port = 0
	# interface = eth0
	# clients = per_socket_clients
	limit {
	      max_connections = 0
	      lifetime = 0
	      idle_timeout = 0
	}
}

listen {
	ipv6addr = ::
	port = 0
	type = acct
	# interface = eth0
	# clients = per_socket_clients

	limit {
		# max_pps = 0
		# idle_timeout = 0
		# lifetime = 0
		# max_connections = 0
	}
}

authorize {
	# filter_username
	# filter_password
	preprocess
	# operator-name
	# cui
	auth_log
	chap
	mschap
	digest
	# wimax
	# IPASS
	suffix
	#ntdomain
	eap {
		ok = return
		# updated = return
	}
	# unix
	# files
	sql
	# smbpasswd
	# -ldap
	# daily

	# Update radacct to handle stale sessions.
	# If the SQL query successfully updates any rows, it will return the number of rows affected. 
	# In FreeRADIUS unlang, the SQL query in this case will return true if 1 or more rows were affected.
	if ("%{sql:UPDATE radacct set acctstoptime=ADDDATE(acctstarttime, INTERVAL acctsessiontime SECOND), acctterminatecause='Clear Stale Session' WHERE username='%{User-Name}' AND callingstationid='%{Calling-Station-Id}' AND acctstoptime is NULL}") {
		
		# Reply with a message to indicate the stale session has been cleared.
		update reply {
			Reply-Message := "Disconnect Duplicate User & Clear Stale Session"
		}

		# Disconnect the user if they have the same username & MAC online. 
		update disconnect {
			User-Name = "%{request:User-Name}"
			Calling-Station-Id = "%{Calling-Station-Id}"
			Framed-IP-Address = "%{Framed-IP-Address}"
		}
	}


    ######################################################################################

	logintime
	pap

#	Autz-Type Status-Server {
#
#	}

	Autz-Type New-TLS-Connection {
		  ok
	}

    ######################################################################################

	## Check User
	if("%{sql:SELECT COUNT(*) as user_found FROM customers WHERE username='%{User-Name}'}" >= 1){

		## check user limit
		update request {
			Tmp-Integer-0 := "%{sql:SELECT COUNT(*) FROM customers WHERE created_by=(SELECT created_by FROM customers WHERE username='%{User-Name}')}"
			Tmp-Integer-1 := "%{sql:SELECT max_customers FROM plans WHERE id=(SELECT plan FROM users WHERE id=(SELECT created_by FROM customers WHERE username='%{User-Name}'))}"
		}

		if ((%{Tmp-Integer-0} >= %{Tmp-Integer-1}) && (%{Tmp-Integer-1} > 0)) {
		    update control {
		         Disabled-Pool := "Disabled_Plan"
		    }
		    if (&control:Disabled-Pool && &control:Disabled-Pool != "") {
		         update reply {
		              Reply-Message := "Access-Reject - Your User Limit is Over; You are assigned to Disabled Pool - %{control:Disabled-Pool}"
		              Framed-Pool := "%{control:Disabled-Pool}"
		         }
		         ok
		    } else {
		         update reply {
		              Reply-Message := "Disabled Pool Not Found"
		         }
		         reject
		    }
		}


		## Add Unknown Users to Disabled Pool
		if ("%{sql:SELECT COUNT(*) FROM customers c INNER JOIN nas n ON c.created_by = n.created_by WHERE c.username='%{User-Name}' AND n.nasname='%{NAS-IP-Address}'}" > 0) {
			# User exists and belongs to the same created_by as the NAS
			ok
		} else {
			update control {
				DISABLED_POOL := "Disabled_Plan"
			}
			if (&control:DISABLED_POOL && &control:DISABLED_POOL != "") {
				ok
				update reply {
					Reply-Message := "User Not Found - assigned to Disabled Pool - %{control:DISABLED_POOL}"
					Framed-Pool := "%{control:DISABLED_POOL}"
				}
			} else { 
				update reply {
					Reply-Message := "Disabled Pool Not Found"
				}
				reject
			}
		}

		# Check if mac_lock is enabled for this user
		if ("%{sql:SELECT IF(maclock = 1, 1, 0) as maclock_status FROM customers WHERE username='%{User-Name}'}" == 1) {
		
			# Check if the mac_address is empty or NULL. If yes, insert Calling-Station-Id into mac_address
			if ("%{sql:SELECT IF(mac_address IS NULL OR mac_address = '', 1, 0) as mac_address_status FROM customers WHERE username='%{User-Name}'}" == 1) {
				update control {
				Tmp-String-0 := "%{sql:UPDATE customers SET mac_address='%{Calling-Station-Id}' WHERE username='%{User-Name}' AND (mac_address IS NULL OR mac_address = '')}"
				}
			}
			
			# Check if the Calling-Station-Id matches any of the mac addresses
			if ("%{sql:SELECT IFNULL(FIND_IN_SET('%{Calling-Station-Id}', mac_address), 0) as is_found_status FROM customers WHERE username='%{User-Name}'}" <= 0) {
				update reply {
				Reply-Message := 'Wrong Mac Address'
				}
				reject
			}
		}

		## Check Token User
		if("%{sql:SELECT COUNT(*) as token_found FROM token WHERE username='%{User-Name}'}" == 1){
	
			## query nas allow
			if("%{sql:SELECT allowanynas FROM settings WHERE id=1}" == 0){
				if("%{sql:SELECT nas.nasname FROM nas INNER JOIN token ON nas.id = token.nas_id WHERE token.username='%{User-Name}' AND token.nas_id != 0}" != "%{NAS-IP-Address}"){
					update reply {
						Reply-Message := 'NAS Not Allowed'
					}
					reject
				}        
			}
	
	        update reply {
	            Reply-Message := 'Token User Found'
	        }
	
			## query user data check
			if("%{sql:SELECT IF(packages.dataqt = 1 AND packages.dataqtvol > 0 AND packages.data_quota_exceed_status = 1 AND packages.data_quota_exceed_type = 1 AND token.used_data_vol >= packages.dataqtvol, 1, 0) as qt_vol_con_status FROM token LEFT JOIN packages ON token.package_id = packages.id WHERE token.username='%{User-Name}'}" == 1){
				update reply {
					Reply-Message := 'Token Reached Data Volume'
				}
				reject
			}
	
			## Check Session Limit
			if("%{sql:SELECT IF(packages.sessionqt = 1 AND packages.sessiontime > 0 AND packages.session_quota_exceed_status = 1 AND packages.session_quota_exceed_type = 1 AND token.used_session_vol >= packages.sessiontime, 1, 0) as qt_session_con_status FROM token LEFT JOIN packages ON token.package_id = packages.id WHERE token.username='%{User-Name}'}" == 1){
				update reply {
					Reply-Message := 'Token Reached Session Limit'
				}
				reject
			}
		}
	}
    ######################################################################################

} ## End of Authorize


#  Authentication.

authenticate {
	Auth-Type PAP {
		pap
	}
	Auth-Type CHAP {
		chap
	}

	Auth-Type MS-CHAP {
		mschap
	}
	mschap
	digest

#	pam

#	Auth-Type LDAP {
#		ldap
#	}

	eap

#	Auth-Type eap {
#		eap {
#			handled = 1
#		}
#		if (handled && (Response-Packet-Type == Access-Challenge)) {
#			attr_filter.access_challenge.post-auth
#			handled  # override the "updated" code from attr_filter
#		}
#	}
}


#
#  Pre-accounting.  Decide which accounting type to use.
#
preacct {
	preprocess

#	acct_counters64


#	update request {
#	  	&FreeRADIUS-Acct-Session-Start-Time = "%{expr: %l - %{%{Acct-Session-Time}:-0} - %{%{Acct-Delay-Time}:-0}}"
#	}


	acct_unique
#	IPASS
	suffix
#	ntdomain

	#
	#  Read the 'acct_users' file
	files
}

accounting {
#	cui
#	detail
#	daily

	unix
#	radutmp
#	sradutmp
#	sqlippool

	sql
#	if (noop) {
#		ok
#	}

#	pgsql-voip

	exec
	attr_filter.accounting_response

#	Acct-Type Status-Server {
#
#	}
    ######################################################################################    
    ## Custom Codes Going Here

}  ## end of accounting


session {
#	radutmp

	#  See "Simultaneous Use Checking Queries" in mods-available/sql
	sql
}

post-auth {

    if (&control:Expired-Pool && &control:Expired-Pool != "") {
        # If Expired-Pool is set and is not empty, remove Framed-IP-Address and Framed-IP-Netmask
        update reply {
            Framed-IP-Address !* ANY
            Framed-IP-Netmask !* ANY
        }
    }

	# Check if Disabled-Pool exists and is not empty
    if (&control:Disabled-Pool && &control:Disabled-Pool != "") {
        # If Disabled-Pool is set and is not empty, remove Framed-IP-Address and Framed-IP-Netmask
        update reply {
            Framed-IP-Address !* ANY
            Framed-IP-Netmask !* ANY
        }
    }

#	if (!&reply:State) {
#		update reply {
#			State := "0x%{randstr:16h}"
#		}
#	}

#	verify_tls_client_common_name

#	if (&EAP-Message && !&Stripped-User-Name && &TLS-Client-Cert-Serial) {
#		update request {
#			&Stripped-User-Name := "%{%{TLS-Client-Cert-Subject-Alt-Name-Email}:-%{%{TLS-Client-Cert-Common-Name}:-%{TLS-Client-Cert-Serial}}}"
#		}
#
#		update reply {
#			Class += "%{md5:%{Calling-Station-Id}%{Called-Station-Id}%{TLS-Client-Cert-Subject-Alt-Name-Email}%{TLS-Client-Cert-Common-Name}%{TLS-Client-Cert-Serial}%{NAS-IPv6-Address}%{NAS-IP-Address}%{NAS-Identifier}%{NAS-Port}"
#		}
#
#	}


	if (session-state:User-Name && reply:User-Name && request:User-Name && (reply:User-Name == request:User-Name)) {
		update reply {
			&User-Name !* ANY
		}
	}
	update {
		&reply: += &session-state:
	}

#	sqlippool
#	cui

#	sql_session_start
	reply_log

	#  See "Authentication Logging Queries" in mods-available/sql
	sql
#	ldap

	# For Exec-Program and Exec-Program-Wait
	exec

	#	update request {
	#	       &WiMAX-MN-NAI = "%{User-Name}"
	#	}
	#
	# 	update reply {
	#		&WiMAX-FA-RK-Key = 0x00
	#		&WiMAX-MSK = "%{reply:EAP-MSK}"
	#	}
	
#	wimax

#
#	update reply {
#	       Reply-Message += "%{TLS-Cert-Serial}"
#	       Reply-Message += "%{TLS-Cert-Expiration}"
#	       Reply-Message += "%{TLS-Cert-Subject}"
#	       Reply-Message += "%{TLS-Cert-Issuer}"
#	       Reply-Message += "%{TLS-Cert-Common-Name}"
#	       Reply-Message += "%{TLS-Cert-Subject-Alt-Name-Email}"
#
#	       Reply-Message += "%{TLS-Client-Cert-Serial}"
#	       Reply-Message += "%{TLS-Client-Cert-Expiration}"
#	       Reply-Message += "%{TLS-Client-Cert-Subject}"
#	       Reply-Message += "%{TLS-Client-Cert-Issuer}"
#	       Reply-Message += "%{TLS-Client-Cert-Common-Name}"
#	       Reply-Message += "%{TLS-Client-Cert-Subject-Alt-Name-Email}"
#	}

#	insert_acct_class

#	if (&reply:EAP-Session-Id) {
#		update reply {
#			EAP-Key-Name := &reply:EAP-Session-Id
#		}
#	}

	#  Remove reply message if the response contains an EAP-Message
	remove_reply_message_if_eap

	Post-Auth-Type REJECT {
		sql
		attr_filter.access_reject
		eap
		remove_reply_message_if_eap
	}
	Post-Auth-Type Challenge {
		# remove_reply_message_if_eap
		# attr_filter.access_challenge.post-auth
	}

	Post-Auth-Type Client-Lost {
		# %{debug_attr:&session-state:TLS-Session-Information[*]}
		# %{debug_attr:&session-state:TLS-Session-Information[n]}
		# %{debug_attr:&session-state:Module-Failure-Message}
	}

	if (EAP-Key-Name && &reply:EAP-Session-Id) {
		update reply {
			&EAP-Key-Name := &reply:EAP-Session-Id
		}
	}
}

pre-proxy {
	# operator-name
	# cui
	# files
	# attr_filter.pre-proxy
	# pre_proxy_log
}

post-proxy {
	# post_proxy_log
	# attr_filter.post-proxy
	eap
	# Post-Proxy-Type Fail-Accounting {
		# detail.example.com
	# }
}
}
